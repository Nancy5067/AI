import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.naive_bayes import MultinomialNB, CategoricalNB
from sklearn.metrics import classification_report,accuracy_score,confusion_matrix

iris = pd.read_csv(r"C:\Users\Khansa\Downloads\archive (4)\Iris.csv")
iris

iris.head(5)
iris.tail(5)
iris.dtypes
iris.info
iris.describe

#selecting features from which we are going to train the model
#selecting all values of 'SepalLengthCm', 'SepalWidth'
x= iris.iloc[:,[1,2,3,4]].values

#selecting all values from species
y =iris.iloc[:,5].values

#using train_test_split to split the whole data into training and testing

x_train,x_test, y_train,y_test =train_test_split(x,y, test_size = 0.2, random_state=42)

#Gaussian Naive Bayes
print("********* For Guasssian  Naive Bayes Classification **********\n")
#storing model in avriable
GNBclf = GaussianNB()
#training model with training data
GNBclf.fit(x_train, y_train)

#Predicting model
y_pred=GNBclf.predict(x_test)
out =GNBclf.predict([[5.9,3.0,5.1,1.8]])
print("*******Predict Species***********",out)
print("\n")

print("Confusion Matrix \n ",confusion_matrix(y_test, y_pred))

print("Accuracuy score \n ",accuracy_score(y_test, y_pred))
print("Classification report\n ",classification_report(y_test, y_pred))

#MUultinominal Naive Bayes
print("********* For Multinomial  Naive Bayes Classification **********\n")
#storing model in avriable
MNBclf = MultinomialNB()
#training model with training data
MNBclf.fit(x_train, y_train)

#Predicting model
y_pred=MNBclf.predict(x_test)
out =MNBclf.predict([[5.9,3.0,5.1,1.8]])
print("*******Predict Species***********",out)
print("\n")

print("Accuracuy score \n ",accuracy_score(y_test, y_pred))
print("Classification report\n ",classification_report(y_test, y_pred))

